def operaciones:int( a,b:int, opcion:string )
{
	if( opcion == "suma")
		return a+b;
	else if(opcion == "resta")
		return a-b;
	else if(opcion == "multiplicacion")
		return a*b;
	else
		return null;
}

const INF: c_int = 1e33;
def dijkstra:long( start,end:int ,  adjList: list->list->int )
{
	let n:int = adjList.size(); //Para guardar cuÃ¡ntos nodos hay

	let distance: list(n)->int = INF; //Inicialmente todos los nodos tienen distancia infinita

	let pq: priority_queue -> {int, int};
	pq.push({0, start}); 
	distance[from] = 0;

	while(!q.empty()){
		let nodeU:int = q.top()[1];
		q.pop();
		for(edge in adjList[nodeU]){
			let nodeV, costEdge:int = edge[0], edge[1];
			if( distance[nodeU] + costEdge  < distance[ nodeV ]){
			distance[nodeV] = distance[nodeU] + costEdge;
			q.push( {dist[nodeV], nodeV} );
		}
	}
	return distance[end];
}


